[{"/Users/williamcougan/workspace/billycougan_dotcom/src/index.js":"1","/Users/williamcougan/workspace/billycougan_dotcom/src/App.js":"2","/Users/williamcougan/workspace/billycougan_dotcom/src/reportWebVitals.js":"3","/Users/williamcougan/workspace/billycougan_dotcom/src/aws-exports.js":"4","/Users/williamcougan/workspace/billycougan_dotcom/src/graphql/queries.js":"5","/Users/williamcougan/workspace/billycougan_dotcom/src/graphql/mutations.js":"6","/Users/williamcougan/workspace/billycougan_dotcom/src/warzone/Warzone.jsx":"7"},{"size":598,"mtime":1610677612127,"results":"8","hashOfConfig":"9"},{"size":2822,"mtime":1611714298228,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610504341274,"results":"11","hashOfConfig":"9"},{"size":870,"mtime":1611709469799,"results":"12","hashOfConfig":"9"},{"size":1881,"mtime":1611709466429,"results":"13","hashOfConfig":"9"},{"size":3031,"mtime":1611709466504,"results":"14","hashOfConfig":"9"},{"size":8834,"mtime":1611886914991,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1je860p",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/williamcougan/workspace/billycougan_dotcom/src/index.js",[],["32","33"],"/Users/williamcougan/workspace/billycougan_dotcom/src/App.js",[],"/Users/williamcougan/workspace/billycougan_dotcom/src/reportWebVitals.js",[],"/Users/williamcougan/workspace/billycougan_dotcom/src/aws-exports.js",[],"/Users/williamcougan/workspace/billycougan_dotcom/src/graphql/queries.js",[],"/Users/williamcougan/workspace/billycougan_dotcom/src/graphql/mutations.js",[],"/Users/williamcougan/workspace/billycougan_dotcom/src/warzone/Warzone.jsx",["34","35","36","37","38","39","40","41","42","43"],"import React, { Component } from \"react\";\nimport { createWarzoneMatch as createWarzoneMatchMutation } from \"../graphql/mutations\";\nimport { API } from \"aws-amplify\";\nimport { listWarzoneMatchs } from \"../graphql/queries\";\nimport wallpaper from \"./warzone.jpg\";\n\nexport default class Warzone extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [{}],\n      friends: [],\n      availablePlayers: [],\n      returnedMatches: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchWarzoneMatches();\n    this.fetchFriends().then(friends => {\n      this.setState({ players: [{}], friends, availablePlayers: friends });\n    });\n  }\n\n  fetchFriends() {\n    const friends = [\n      { id: 1, name: \"willycougz\" },\n      { id: 2, name: \"smittytheman\" },\n      { id: 3, name: \"pkcsmokecity\" },\n      { id: 4, name: \"jacobmoneybagz\" }\n    ];\n    return new Promise(resolve => {\n      resolve(friends);\n    });\n  }\n\n  async createWarzoneMatch() {\n    let { players } = this.state;\n    players.forEach(player => {\n      player.playerId = player.id.toString();\n      delete player.id;\n      delete player.name;\n    });\n    const data = {\n      results: players\n    };\n    console.log(players);\n    await API.graphql({\n      query: createWarzoneMatchMutation,\n      variables: { input: data }\n    });\n  }\n\n  async fetchWarzoneMatches() {\n    const apiData = await API.graphql({ query: listWarzoneMatchs });\n    const matches = apiData.data.listWarzoneMatchs.items;\n    await Promise.all(\n      matches.map(async note => {\n        return note;\n      })\n    );\n    console.log(matches);\n    this.setState({ returnedMatches: matches });\n    //setNotes(apiData.data.ListWarzoneMatchs.items);\n  }\n\n  getPlayerAverages(data, playerName) {\n    const playerId = this.getPlayerIdFromName(playerName);\n    console.log(playerName);\n    const totals = { score: 0, kills: 0, deaths: 0, damage: 0 };\n    let count = 0;\n    data.forEach(item => {\n      const playerResult = item.results.find(\n        result => result.playerId == playerId\n      );\n      if (playerResult) {\n        totals.score += playerResult.score;\n        totals.kills += playerResult.kills;\n        totals.deaths += playerResult.deaths;\n        totals.damage += playerResult.damage;\n        count++;\n      }\n    });\n    const averages = {\n      score: totals.score / count,\n      kills: totals.kills / count,\n      deaths: totals.deaths / count,\n      damage: totals.damage / count\n    };\n    console.log(averages);\n  }\n\n  getPlayerIdFromName(name) {\n    const friend = this.state.friends.find(friend => friend.name == name);\n    return friend ? friend.id : null;\n  }\n\n  onAddPlayer() {\n    const players = this.state.players;\n    players.push({});\n    this.setState({ players });\n  }\n\n  onSelectPlayer(event, player, playerIndex) {\n    let { players, availablePlayers, friends } = this.state;\n    // Store the previously selected player - will need to be added back to available players\n    const previouslySelectedPlayer = friends.find(\n      friend => friend.id == player.id\n    );\n    // Update the selected player\n    const selectedPlayer = availablePlayers.find(\n      player => player.id == event.target.value\n    );\n    player.id = selectedPlayer.id;\n    player.name = selectedPlayer.name;\n    players[playerIndex] = player;\n    // Update the available players\n    availablePlayers = this.state.availablePlayers.filter(\n      player => player.id != event.target.value\n    );\n    if (previouslySelectedPlayer) {\n      availablePlayers.push(previouslySelectedPlayer);\n    }\n    this.setState({ players, availablePlayers });\n  }\n\n  onRemovePlayer(player, playerIndex) {\n    let { players, availablePlayers, friends } = this.state;\n    // Store the previously selected player - will need to be added back to available players\n    const previouslySelectedPlayer = friends.find(\n      friend => friend.id == player.id\n    );\n    if (previouslySelectedPlayer) {\n      availablePlayers.push(previouslySelectedPlayer);\n    }\n    players.splice(playerIndex, 1);\n    this.setState({ players, availablePlayers });\n  }\n\n  onUpdatePlayer(event, playerIndex, attribute) {\n    const { players } = this.state;\n    players[playerIndex][attribute] = event.target.value;\n    this.setState({ players });\n  }\n\n  onSubmit() {\n    let emptyCount = 0;\n    for (const player of this.state.players) {\n      if (!player.id) {\n        emptyCount++;\n      }\n      if (!player.score && player.score != 0) {\n        emptyCount++;\n      }\n      if (!player.kills && player.kills != 0) {\n        emptyCount++;\n      }\n      if (!player.deaths && player.deaths != 0) {\n        emptyCount++;\n      }\n      if (!player.damage && player.damage != 0) {\n        emptyCount++;\n      }\n    }\n    if (emptyCount) {\n      alert(\n        \"There are \" + emptyCount + \" fields that still need to be entered.\"\n      );\n    } else {\n      this.createWarzoneMatch();\n      // const doSubmit = window.confirm(\"Ready to submit?\");\n    }\n    console.log(this.state.players);\n  }\n\n  render() {\n    const backgroundStyles = {\n      background: \"url(\" + wallpaper + \") no-repeat center center fixed\",\n      \"-webkit-background-size\": \"cover\",\n      \"-moz-background-size\": \"cover\",\n      \"-o-background-size\": \"cover\",\n      \"background-size\": \"cover\"\n    };\n    return (\n      <div id=\"warzone-container\" style={backgroundStyles}>\n        <h1 className=\"warzone-logo\">WARZONE</h1>\n        <h1 className=\"warzone-logo\">Tracker</h1>\n        <table className=\"tinted-container\">\n          <thead>\n            <tr>\n              <th>Player</th>\n              <th>Score</th>\n              <th>Kills</th>\n              <th>Deaths</th>\n              <th>Damage</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.players.map((player, index) => (\n              <tr key={\"player-\" + index}>\n                <td>\n                  <select\n                    value={player.id}\n                    onChange={event =>\n                      this.onSelectPlayer(event, player, index)\n                    }\n                  >\n                    <option value={player.id}>\n                      {player.name ? player.name : \"\"}\n                    </option>\n                    {this.state.availablePlayers.map(\n                      (availablePlayer, index) => (\n                        <option\n                          key={\"availablePlayer-\" + index}\n                          value={availablePlayer.id}\n                        >\n                          {availablePlayer.name}\n                        </option>\n                      )\n                    )}\n                  </select>\n                </td>\n                <td>\n                  <input\n                    type=\"number\"\n                    onChange={event =>\n                      this.onUpdatePlayer(event, index, \"score\")\n                    }\n                  ></input>\n                </td>\n                <td>\n                  <input\n                    type=\"number\"\n                    onChange={event =>\n                      this.onUpdatePlayer(event, index, \"kills\")\n                    }\n                  ></input>\n                </td>\n                <td>\n                  <input\n                    type=\"number\"\n                    onChange={event =>\n                      this.onUpdatePlayer(event, index, \"deaths\")\n                    }\n                  ></input>\n                </td>\n                <td>\n                  <input\n                    type=\"number\"\n                    onChange={event =>\n                      this.onUpdatePlayer(event, index, \"damage\")\n                    }\n                  ></input>\n                </td>\n                <td>\n                  <button\n                    hidden={!index && this.state.players.length === 1}\n                    onClick={() => this.onRemovePlayer(player, index)}\n                  >\n                    Remove\n                  </button>\n                </td>\n              </tr>\n            ))}\n            <button\n              hidden={this.state.players.length === 4}\n              onClick={() => this.onAddPlayer()}\n            >\n              Add player\n            </button>\n            <button onClick={() => this.onSubmit()}>Submit</button>\n          </tbody>\n        </table>\n        <div className=\"tinted-container\">\n          <label>Username</label>\n          <input\n            type=\"text\"\n            onChange={event => {\n              this.findAverageName = event.target.value;\n            }}\n          ></input>\n          <button\n            onClick={() =>\n              this.getPlayerAverages(\n                this.state.returnedMatches,\n                this.findAverageName\n              )\n            }\n          >\n            Get averages\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":74,"column":35,"nodeType":"50","messageId":"51","endLine":74,"endColumn":37},{"ruleId":"48","severity":1,"message":"49","line":94,"column":66,"nodeType":"50","messageId":"51","endLine":94,"endColumn":68},{"ruleId":"48","severity":1,"message":"49","line":108,"column":27,"nodeType":"50","messageId":"51","endLine":108,"endColumn":29},{"ruleId":"48","severity":1,"message":"49","line":112,"column":27,"nodeType":"50","messageId":"51","endLine":112,"endColumn":29},{"ruleId":"48","severity":1,"message":"52","line":119,"column":27,"nodeType":"50","messageId":"51","endLine":119,"endColumn":29},{"ruleId":"48","severity":1,"message":"49","line":131,"column":27,"nodeType":"50","messageId":"51","endLine":131,"endColumn":29},{"ruleId":"48","severity":1,"message":"52","line":152,"column":41,"nodeType":"50","messageId":"51","endLine":152,"endColumn":43},{"ruleId":"48","severity":1,"message":"52","line":155,"column":41,"nodeType":"50","messageId":"51","endLine":155,"endColumn":43},{"ruleId":"48","severity":1,"message":"52","line":158,"column":43,"nodeType":"50","messageId":"51","endLine":158,"endColumn":45},{"ruleId":"48","severity":1,"message":"52","line":161,"column":43,"nodeType":"50","messageId":"51","endLine":161,"endColumn":45},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]